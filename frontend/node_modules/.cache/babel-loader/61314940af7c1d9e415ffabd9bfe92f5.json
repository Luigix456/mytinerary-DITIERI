{"ast":null,"code":"const initialState = {\n  city: {},\n  cities: [],\n  aux: [],\n  filterCities: []\n};\n\nconst citiesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'fetch':\n      return { ...state,\n        cities: action.payload,\n        aux: action.payload,\n        filterCities: action.payload\n      };\n\n    case 'deleteCity':\n      return { ...state,\n        itineraries: action.payload\n      };\n\n    case 'loadCity':\n      let city = [...state.itineraries];\n      city.push(action.payload);\n      return { ...state,\n        city,\n        aux: [...city]\n      };\n\n    case 'filtro':\n      const {\n        citiesArray,\n        value\n      } = action.payload;\n      const filtrado = citiesArray.filter(city => city.name.toLowerCase().startsWith(value.toLowerCase().trim()));\n      return { ...state,\n        filterCities: filtrado\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default citiesReducer;","map":{"version":3,"sources":["C:/Users/Luis/Documents/BOOTCAMP/MODULO 3/MERN/mytinerary-DITIERI/src/redux/reducers/citiesReducer.js"],"names":["initialState","city","cities","aux","filterCities","citiesReducer","state","action","type","payload","itineraries","push","citiesArray","value","filtrado","filter","name","toLowerCase","startsWith","trim"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,GAAG,EAAE,EAHY;AAIjBC,EAAAA,YAAY,EAAE;AAJG,CAArB;;AAOA,MAAMC,aAAa,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,OAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHJ,QAAAA,MAAM,EAAEK,MAAM,CAACE,OAFZ;AAGHN,QAAAA,GAAG,EAAEI,MAAM,CAACE,OAHT;AAIHL,QAAAA,YAAY,EAAEG,MAAM,CAACE;AAJlB,OAAP;;AAMA,SAAK,YAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHI,QAAAA,WAAW,EAAEH,MAAM,CAACE;AAFjB,OAAP;;AAIJ,SAAK,UAAL;AACI,UAAIR,IAAI,GAAG,CAAC,GAAGK,KAAK,CAACI,WAAV,CAAX;AACAT,MAAAA,IAAI,CAACU,IAAL,CAAUJ,MAAM,CAACE,OAAjB;AACA,aAAO,EACH,GAAGH,KADA;AAEHL,QAAAA,IAFG;AAGHE,QAAAA,GAAG,EAAE,CAAC,GAAGF,IAAJ;AAHF,OAAP;;AAKA,SAAK,QAAL;AACI,YAAM;AAAEW,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAAyBN,MAAM,CAACE,OAAtC;AACA,YAAMK,QAAQ,GAAGF,WAAW,CAACG,MAAZ,CAAoBd,IAAI,IAAIA,IAAI,CAACe,IAAL,CAAUC,WAAV,GAAwBC,UAAxB,CAAmCL,KAAK,CAACI,WAAN,GAAoBE,IAApB,EAAnC,CAA5B,CAAjB;AAEA,aAAO,EACH,GAAGb,KADA;AAEHF,QAAAA,YAAY,EAAEU;AAFX,OAAP;;AAIJ;AACI,aAAOR,KAAP;AA9BhB;AAiCH,CAlCD;;AAmCA,eAAeD,aAAf","sourcesContent":["const initialState = {\r\n    city: {},\r\n    cities: [],\r\n    aux: [],\r\n    filterCities: [],\r\n}\r\n\r\nconst citiesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'fetch':\r\n            return {\r\n                ...state,\r\n                cities: action.payload,\r\n                aux: action.payload,\r\n                filterCities: action.payload\r\n            }\r\n            case 'deleteCity':\r\n                return {\r\n                    ...state,\r\n                    itineraries: action.payload\r\n                }\r\n            case 'loadCity':\r\n                let city = [...state.itineraries]\r\n                city.push(action.payload)\r\n                return {\r\n                    ...state,\r\n                    city,\r\n                    aux: [...city]\r\n                }\r\n                case 'filtro':\r\n                    const { citiesArray, value } = action.payload\r\n                    const filtrado = citiesArray.filter((city => city.name.toLowerCase().startsWith(value.toLowerCase().trim())))\r\n        \r\n                    return {\r\n                        ...state,\r\n                        filterCities: filtrado\r\n                    }\r\n                default:\r\n                    return state\r\n            \r\n    }\r\n}\r\nexport default citiesReducer"]},"metadata":{},"sourceType":"module"}