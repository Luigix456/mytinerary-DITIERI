{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport citiesActions from \"../redux/actions/citiesActions\";\nimport itinerariesActions from '../redux/actions/itinerariesActions';\nimport { Link as LinkRouter } from \"react-router-dom\";\nimport detailsItinerary from './detailsCard';\n\nconst Cards = props => {\n  _s();\n\n  const {\n    cities,\n    itineraries\n  } = props;\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    props.perCity(id);\n    props.itinerariesPerCity(id);\n  }, []);\n  return {\n    /* <div>\r\n    {props.itineraries?.length !== 0 ?  \r\n    ( \r\n      itineraries.map(itinerary => (\r\n       \r\n           <detailsItinerary itinerary={itinerary} key={itinerary._id}/>\r\n          \r\n           ))):\r\n           (<h3>WE COULD NOT FIND ANY ITINERARY FOR THIS CITY</h3>)}\r\n    \r\n    </div> */\n  };\n};\n\n_s(Cards, \"WTkzVJt056/9vEFrj9nX40yNcDw=\", false, function () {\n  return [useParams];\n});\n\n_c = Cards;\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.Data.cities,\n    filterCities: state.Data.filterCities\n  };\n};\n\nconst mapDispatchToProps = {\n  findOneCity: citiesActions.perCity,\n  itinerariesPerCity: itinerariesActions.itinerariesPerCity\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Cards);\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["C:/Users/Luis/Documents/BOOTCAMP/MODULO 3/MERN/mytinerary-DITIERI/src/components/details.js"],"names":["React","useParams","useEffect","connect","citiesActions","itinerariesActions","Link","LinkRouter","detailsItinerary","Cards","props","cities","itineraries","id","perCity","itinerariesPerCity","mapStateToProps","state","Data","filterCities","mapDispatchToProps","findOneCity"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAAQC,IAAI,IAAIC,UAAhB,QAAiC,kBAAjC;AACA,OAAOC,gBAAP,MAA6B,eAA7B;;AAIA,MAAMC,KAAK,GAAIC,KAAD,IAAU;AAAA;;AACpB,QAAM;AACFC,IAAAA,MADE;AAEFC,IAAAA;AAFE,MAGFF,KAHJ;AAKA,QAAM;AAACG,IAAAA;AAAD,MAAOZ,SAAS,EAAtB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZQ,IAAAA,KAAK,CAACI,OAAN,CAAcD,EAAd;AACAH,IAAAA,KAAK,CAACK,kBAAN,CAAyBF,EAAzB;AACH,GAJQ,EAIN,EAJM,CAAT;AAOA,SAEI;AAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVQ,GAFJ;AAeC,CA9BL;;GAAMJ,K;UAMWR,S;;;KANXQ,K;;AA+BF,MAAMO,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACLN,IAAAA,MAAM,EAAEM,KAAK,CAACC,IAAN,CAAWP,MADd;AAELQ,IAAAA,YAAY,EAAEF,KAAK,CAACC,IAAN,CAAWC;AAFpB,GAAP;AAID,CALH;;AAME,MAAMC,kBAAkB,GAAG;AACjBC,EAAAA,WAAW,EAAEjB,aAAa,CAACU,OADV;AAEjBC,EAAAA,kBAAkB,EAAEV,kBAAkB,CAACU;AAFtB,CAA3B;AAIA,eAAeZ,OAAO,CAACa,eAAD,EAAiBI,kBAAjB,CAAP,CAA4CX,KAA5C,CAAf","sourcesContent":["import React from \"react\";\r\nimport { useParams } from 'react-router-dom'\r\nimport { useEffect } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport citiesActions from \"../redux/actions/citiesActions\";\r\nimport itinerariesActions from '../redux/actions/itinerariesActions'\r\nimport {Link as LinkRouter} from \"react-router-dom\"\r\nimport detailsItinerary from './detailsCard'\r\n\r\n\r\n\r\nconst Cards = (props) =>{\r\n    const {\r\n        cities,\r\n        itineraries\r\n    } = props;\r\n \r\n    const {id} = useParams()\r\n  \r\n    useEffect(() => {\r\n        \r\n        props.perCity(id)\r\n        props.itinerariesPerCity(id)\r\n    }, []);\r\n\r\n       \r\n    return(\r\n        \r\n        {/* <div>\r\n        {props.itineraries?.length !== 0 ?  \r\n        ( \r\n           itineraries.map(itinerary => (\r\n            \r\n                <detailsItinerary itinerary={itinerary} key={itinerary._id}/>\r\n               \r\n                ))):\r\n                (<h3>WE COULD NOT FIND ANY ITINERARY FOR THIS CITY</h3>)}\r\n         \r\n         </div> */}\r\n        )\r\n       \r\n    }\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n          cities: state.Data.cities,\r\n          filterCities: state.Data.filterCities,\r\n        };\r\n      };\r\n      const mapDispatchToProps = {\r\n                findOneCity: citiesActions.perCity,\r\n                itinerariesPerCity: itinerariesActions.itinerariesPerCity\r\n      };\r\n      export default connect(mapStateToProps,mapDispatchToProps)(Cards)\r\n      "]},"metadata":{},"sourceType":"module"}