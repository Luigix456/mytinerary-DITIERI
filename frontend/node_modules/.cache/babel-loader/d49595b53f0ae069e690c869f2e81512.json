{"ast":null,"code":"/* import { convertLength } from \"@mui/material/styles/cssUtils\"; */\nimport axios from \"axios\";\nconst citiesActions = {\n  fetchCities: () => {\n    return async (dispatch, getState) => {\n      const res = await axios.get('http://localhost:4000/api/allcities/');\n      console.log(res);\n      dispatch({\n        type: \"fetch\",\n        payload: res.data.response.cities\n      });\n      console.log(res.data);\n    };\n  },\n  perCity: id => {\n    return async (dispatch, getState) => {\n      const res = await axios.get('http://localhost:4000/api/allcities/' + id);\n      console.log(res);\n      dispatch({\n        type: 'fetchOne',\n        payload: res.data.respuesta\n      });\n    };\n  },\n  filterCity: (citiesArray, value) => {\n    return (dispatch, getState) => {\n      dispatch({\n        type: \"filtro\",\n        payload: {\n          citiesArray,\n          value\n        }\n      });\n    };\n  },\n  deleteCities: id => {\n    return async (dispatch, getState) => {\n      try {\n        const res = await axios.delete('http://localhost:4000/api/allcities/' + id);\n        dispatch({\n          type: 'delete',\n          payload: res.data.response.ciudades\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n  },\n  chargeCities: (name, ciudad) => {\n    return async (dispatch, getState) => {\n      const res = await axios.post('http://localhost:4000/api/allcities', {\n        name,\n        ciudad\n      });\n      dispatch({\n        type: 'chargeCities',\n        payload: res.data.response.ciudades\n      });\n    };\n  }\n};\nexport default citiesActions;","map":{"version":3,"sources":["C:/Users/Luis/Documents/BOOTCAMP/MODULO 3/MERN/mytinerary-DITIERI/src/redux/actions/citiesActions.js"],"names":["axios","citiesActions","fetchCities","dispatch","getState","res","get","console","log","type","payload","data","response","cities","perCity","id","respuesta","filterCity","citiesArray","value","deleteCities","delete","ciudades","err","chargeCities","name","ciudad","post"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAG;AAElBC,EAAAA,WAAW,EAAE,MAAM;AACf,WAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA6B;AAChC,YAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,sCAAV,CAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAF,MAAAA,QAAQ,CAAC;AAACM,QAAAA,IAAI,EAAE,OAAP;AAAgBC,QAAAA,OAAO,EAAEL,GAAG,CAACM,IAAJ,CAASC,QAAT,CAAkBC;AAA3C,OAAD,CAAR;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACM,IAAhB;AACH,KALD;AAMH,GATiB;AAWlBG,EAAAA,OAAO,EAAGC,EAAD,IAAQ;AACb,WAAO,OAAOZ,QAAP,EAAiBC,QAAjB,KAA6B;AAChC,YAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,yCAAuCS,EAAlD,CAAlB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAF,MAAAA,QAAQ,CAAE;AAACM,QAAAA,IAAI,EAAE,UAAP;AAAmBC,QAAAA,OAAO,EAAEL,GAAG,CAACM,IAAJ,CAASK;AAArC,OAAF,CAAR;AACH,KAJD;AAKH,GAjBiB;AAkBlBC,EAAAA,UAAU,EAAE,CAACC,WAAD,EAAcC,KAAd,KAAwB;AAChC,WAAO,CAAChB,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,MAAAA,QAAQ,CAAC;AAACM,QAAAA,IAAI,EAAE,QAAP;AAAiBC,QAAAA,OAAO,EAAE;AAACQ,UAAAA,WAAD;AAAcC,UAAAA;AAAd;AAA1B,OAAD,CAAR;AACH,KAFD;AAGH,GAtBiB;AAuBlBC,EAAAA,YAAY,EAAGL,EAAD,IAAM;AAChB,WAAO,OAAMZ,QAAN,EAAgBC,QAAhB,KAA2B;AAC9B,UAAI;AACA,cAAMC,GAAG,GAAG,MAAML,KAAK,CAACqB,MAAN,CAAa,yCAAuCN,EAApD,CAAlB;AAEAZ,QAAAA,QAAQ,CAAC;AAACM,UAAAA,IAAI,EAAC,QAAN;AAAgBC,UAAAA,OAAO,EAACL,GAAG,CAACM,IAAJ,CAASC,QAAT,CAAkBU;AAA1C,SAAD,CAAR;AACH,OAJD,CAIC,OAAMC,GAAN,EAAU;AACPhB,QAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;AACH;AACJ,KARD;AASH,GAjCiB;AAkClBC,EAAAA,YAAY,EAAE,CAACC,IAAD,EAAOC,MAAP,KAAgB;AAC1B,WAAO,OAAMvB,QAAN,EAAgBC,QAAhB,KAA2B;AAC9B,YAAMC,GAAG,GAAG,MAAML,KAAK,CAAC2B,IAAN,CAAW,qCAAX,EAAiD;AAACF,QAAAA,IAAD;AAAMC,QAAAA;AAAN,OAAjD,CAAlB;AACAvB,MAAAA,QAAQ,CAAC;AAACM,QAAAA,IAAI,EAAC,cAAN;AAAsBC,QAAAA,OAAO,EAACL,GAAG,CAACM,IAAJ,CAASC,QAAT,CAAkBU;AAAhD,OAAD,CAAR;AACH,KAHD;AAIH;AAvCiB,CAAtB;AAyCA,eAAerB,aAAf","sourcesContent":["/* import { convertLength } from \"@mui/material/styles/cssUtils\"; */\nimport axios from \"axios\";\n\nconst citiesActions = {\n    \n    fetchCities: () => {\n        return async (dispatch, getState) =>{\n            const res = await axios.get('http://localhost:4000/api/allcities/')\n            console.log(res)            \n            dispatch({type: \"fetch\", payload: res.data.response.cities})\n            console.log(res.data)\n        }\n    },\n    \n    perCity: (id) => {\n        return async (dispatch, getState) =>{\n            const res = await axios.get ('http://localhost:4000/api/allcities/'+id)\n            console.log(res)\n            dispatch ({type: 'fetchOne', payload: res.data.respuesta})\n        }\n    },\n    filterCity: (citiesArray, value) => {\n        return (dispatch, getState) => {\n            dispatch({type: \"filtro\", payload: {citiesArray, value}})\n        };\n    },\n    deleteCities: (id)=>{\n        return async(dispatch, getState)=>{\n            try {\n                const res = await axios.delete('http://localhost:4000/api/allcities/'+id)\n                \n                dispatch({type:'delete', payload:res.data.response.ciudades})\n            }catch(err){\n                console.log(err)\n            }\n        }\n    },\n    chargeCities: (name, ciudad)=>{\n        return async(dispatch, getState)=>{\n            const res = await axios.post('http://localhost:4000/api/allcities',{name,ciudad})\n            dispatch({type:'chargeCities', payload:res.data.response.ciudades})\n        }\n    }\n}\nexport default citiesActions"]},"metadata":{},"sourceType":"module"}