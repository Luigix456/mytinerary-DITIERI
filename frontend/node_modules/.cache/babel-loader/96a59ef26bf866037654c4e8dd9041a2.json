{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luis\\\\Documents\\\\BOOTCAMP\\\\MODULO 3\\\\MERN\\\\mytinerary-DITIERI\\\\src\\\\components\\\\cards.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Card from './citiesCards';\n/* import data from '../../card.json' */\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport citiesActions from '../redux/actions/citiesActions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cards(props) {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [searchTitle, setSearchTitle] = useState(\"\");\n  const [ciudades, setCiudades] = useState([]);\n  /*  const [city, setCity] = useState(); */\n\n  /* useEffect(() => {\r\n   const loadPosts = async () => {\r\n     setLoading(true);\r\n     const response = await axios.get(\r\n       \"http://localhost:4000/api/allcities\"\r\n     )\r\n     setCiudades(response.data.response.cities)\r\n     setPosts(response.data.response.cities)\r\n     setLoading(false);\r\n  \n  \n  \n   }\r\n  \n   loadPosts()\r\n  }, []) */\n\n  /* const searching = (search) => {\r\n   setSearchTitle(search.target.value);\r\n   filtro(search.target.value);\r\n  }\r\n  const filtro = function (resultado) {\r\n   let resultadoFiltro = posts.filter(function (card)\r\n   {\r\n     if (\r\n       card.name\r\n         .toString()\r\n         .toLowerCase()\r\n         .startsWith(resultado.toLowerCase().trim())\r\n     ) {\r\n       return card\r\n     } return(console.log(\"filtro\"))\r\n   })\r\n   setCiudades(resultadoFiltro) */\n\n  useEffect(() => {\n    props.fetchCities();\n  }, []);\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Cities\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n  {\n    /* <>\r\n     <div className='searchfilter'>\r\n     <br></br>\r\n     <div className='search-title'>\r\n       <p>¡Find your favorite place!</p>\r\n     <input\r\n       type=\"text\"\r\n       placeholder=\"Search...\"\r\n       value={searchTitle}\r\n       onChange={searching}\r\n     />\r\n     </div>\r\n     </div>\r\n     <div className='container d-flex justify-content-center h-100'>\r\n     <div className='row cards'>   \r\n     {loading ? (<h4>Loading ...</h4>) : (console.log(\"...\"))}\r\n     {ciudades.length !== 0 ? (\r\n       ciudades.map((item) => (\r\n       <div className='row cards' key={item.id}>\r\n       <Card\r\n                 image = {item.image}\r\n                 continent = {item.continent}\r\n                 name = {item.name}\r\n                 description = {item.description}\r\n              />\r\n       </div>))\r\n       ) : (\r\n       <h3 className='notFound'>Not Found :/</h3>\r\n       )}\r\n     </div>\r\n    </div>\r\n    </> */\n  }\n}\n/* console.log(searchTitle) */\n\n/* const mapStateToProps = (state) => {\r\n    return{\r\n      cities: state.Data.cities,\r\n      filterCities: state.Data.filterCities,\r\n        \r\n  }\r\n  }\r\nconst mapDispatchToProps = {\r\nfetchCities: citiesActions.fetchCities,\r\nfilterCity : citiesActions.filterCity\r\n}     \r\n*/\n\n\n_s(Cards, \"epUo7FuXhj0pkyU0iomq7J1iqxU=\");\n\n_c = Cards;\nexport default\n/* connect(mapStateToProps,mapDispatchToProps) */\nCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["C:/Users/Luis/Documents/BOOTCAMP/MODULO 3/MERN/mytinerary-DITIERI/src/components/cards.js"],"names":["React","Card","useState","useEffect","axios","citiesActions","connect","Cards","props","loading","setLoading","posts","setPosts","searchTitle","setSearchTitle","ciudades","setCiudades","fetchCities","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAAQC,OAAR,QAAsB,aAAtB;;;AAGC,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACrB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACEC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,KAAK,CAACS,WAAN;AACD,GAFQ,EAEN,EAFM,CAAT;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACE;AAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAW;AAEV;AACC;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA5FUD,K;;KAAAA,K;AA+FV;AAAe;AAAkDA,KAAjE","sourcesContent":["import React from 'react'\r\nimport Card from './citiesCards'\r\n/* import data from '../../card.json' */\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport citiesActions from '../redux/actions/citiesActions'\r\nimport {connect} from 'react-redux';\r\n\r\n\r\n function Cards(props) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [searchTitle, setSearchTitle] = useState(\"\");\r\n  const [ciudades, setCiudades] = useState([])\r\n /*  const [city, setCity] = useState(); */\r\n /* useEffect(() => {\r\n  const loadPosts = async () => {\r\n    setLoading(true);\r\n    const response = await axios.get(\r\n      \"http://localhost:4000/api/allcities\"\r\n    )\r\n    setCiudades(response.data.response.cities)\r\n    setPosts(response.data.response.cities)\r\n    setLoading(false);\r\n\r\n\r\n\r\n  }\r\n\r\n  loadPosts()\r\n}, []) */\r\n\r\n /* const searching = (search) => {\r\n  setSearchTitle(search.target.value);\r\n  filtro(search.target.value);\r\n}\r\nconst filtro = function (resultado) {\r\n  let resultadoFiltro = posts.filter(function (card)\r\n  {\r\n    if (\r\n      card.name\r\n        .toString()\r\n        .toLowerCase()\r\n        .startsWith(resultado.toLowerCase().trim())\r\n    ) {\r\n      return card\r\n    } return(console.log(\"filtro\"))\r\n  })\r\n  setCiudades(resultadoFiltro) */\r\n  useEffect(() => {\r\n    props.fetchCities()\r\n  }, []);\r\n  console.log(props)\r\n     \r\n  return <h1>Cities</h1>\r\n    {/* <>\r\n      <div className='searchfilter'>\r\n      <br></br>\r\n      <div className='search-title'>\r\n        <p>¡Find your favorite place!</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={searchTitle}\r\n        onChange={searching}\r\n      />\r\n      </div>\r\n      </div>\r\n      <div className='container d-flex justify-content-center h-100'>\r\n      <div className='row cards'>   \r\n      {loading ? (<h4>Loading ...</h4>) : (console.log(\"...\"))}\r\n      {ciudades.length !== 0 ? (\r\n        ciudades.map((item) => (\r\n        <div className='row cards' key={item.id}>\r\n        <Card\r\n                  image = {item.image}\r\n                  continent = {item.continent}\r\n                  name = {item.name}\r\n                  description = {item.description}\r\n               />\r\n        </div>))\r\n        ) : (\r\n        <h3 className='notFound'>Not Found :/</h3>\r\n        )}\r\n      </div>\r\n    </div>\r\n    </> */}\r\n      \r\n}\r\n  /* console.log(searchTitle) */\r\n  /* const mapStateToProps = (state) => {\r\n\r\n    return{\r\n        cities: state.Data.cities,\r\n        filterCities: state.Data.filterCities,\r\n\r\n        \r\n    }\r\n    }\r\nconst mapDispatchToProps = {\r\n fetchCities: citiesActions.fetchCities,\r\n filterCity : citiesActions.filterCity\r\n}     \r\n */\r\nexport default /* connect(mapStateToProps,mapDispatchToProps) */(Cards)\r\n"]},"metadata":{},"sourceType":"module"}