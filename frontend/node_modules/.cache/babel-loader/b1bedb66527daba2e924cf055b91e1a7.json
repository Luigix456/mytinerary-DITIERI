{"ast":null,"code":"import $cgWTI$react, { useContext as $cgWTI$useContext, useMemo as $cgWTI$useMemo, useState as $cgWTI$useState, useLayoutEffect as $cgWTI$useLayoutEffect } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $9d939cbc98267846$exports = {};\n$parcel$export($9d939cbc98267846$exports, \"SSRProvider\", () => $9d939cbc98267846$export$9f8ac96af4b1b2ae);\n$parcel$export($9d939cbc98267846$exports, \"useSSRSafeId\", () => $9d939cbc98267846$export$619500959fc48b26);\n$parcel$export($9d939cbc98267846$exports, \"useIsSSR\", () => $9d939cbc98267846$export$535bd6ca7f90a273); // Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\n\nconst $9d939cbc98267846$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\nconst $9d939cbc98267846$var$SSRContext = /*#__PURE__*/$cgWTI$react.createContext($9d939cbc98267846$var$defaultContext);\n\nfunction $9d939cbc98267846$export$9f8ac96af4b1b2ae(props) {\n  let cur = $cgWTI$useContext($9d939cbc98267846$var$SSRContext);\n  let value = $cgWTI$useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === $9d939cbc98267846$var$defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n  return /*#__PURE__*/$cgWTI$react.createElement($9d939cbc98267846$var$SSRContext.Provider, {\n    value: value\n  }, props.children);\n}\n\nlet $9d939cbc98267846$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nfunction $9d939cbc98267846$export$619500959fc48b26(defaultId) {\n  let ctx = $cgWTI$useContext($9d939cbc98267846$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n\n  if (ctx === $9d939cbc98267846$var$defaultContext && !$9d939cbc98267846$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  return $cgWTI$useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\nfunction $9d939cbc98267846$export$535bd6ca7f90a273() {\n  let cur = $cgWTI$useContext($9d939cbc98267846$var$SSRContext);\n  let isInSSRContext = cur !== $9d939cbc98267846$var$defaultContext;\n  let [isSSR, setIsSSR] = $cgWTI$useState(isInSSRContext); // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n\n  if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    $cgWTI$useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  return isSSR;\n}\n\nexport { $9d939cbc98267846$export$9f8ac96af4b1b2ae as SSRProvider, $9d939cbc98267846$export$619500959fc48b26 as useSSRSafeId, $9d939cbc98267846$export$535bd6ca7f90a273 as useIsSSR };","map":{"version":3,"mappings":"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","names":["$cgWTI$react","useContext","$cgWTI$useContext","useMemo","$cgWTI$useMemo","useState","$cgWTI$useState","useLayoutEffect","$cgWTI$useLayoutEffect","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$9d939cbc98267846$exports","$9d939cbc98267846$export$9f8ac96af4b1b2ae","$9d939cbc98267846$export$619500959fc48b26","$9d939cbc98267846$export$535bd6ca7f90a273","$9d939cbc98267846$var$defaultContext","prefix","String","Math","round","random","current","$9d939cbc98267846$var$SSRContext","createContext","props","cur","value","createElement","Provider","children","$9d939cbc98267846$var$canUseDOM","Boolean","window","document","defaultId","ctx","console","warn","isInSSRContext","isSSR","setIsSSR","SSRProvider","useSSRSafeId","useIsSSR"],"sources":["C:/Users/Luis/Documents/BOOTCAMP/MODULO 3/MERN/1ra-app/node_modules/@react-aria/ssr/dist/module.js"],"sourcesContent":["import $cgWTI$react, {useContext as $cgWTI$useContext, useMemo as $cgWTI$useMemo, useState as $cgWTI$useState, useLayoutEffect as $cgWTI$useLayoutEffect} from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $9d939cbc98267846$exports = {};\n\n$parcel$export($9d939cbc98267846$exports, \"SSRProvider\", () => $9d939cbc98267846$export$9f8ac96af4b1b2ae);\n$parcel$export($9d939cbc98267846$exports, \"useSSRSafeId\", () => $9d939cbc98267846$export$619500959fc48b26);\n$parcel$export($9d939cbc98267846$exports, \"useIsSSR\", () => $9d939cbc98267846$export$535bd6ca7f90a273);\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst $9d939cbc98267846$var$defaultContext = {\n    prefix: String(Math.round(Math.random() * 10000000000)),\n    current: 0\n};\nconst $9d939cbc98267846$var$SSRContext = /*#__PURE__*/ $cgWTI$react.createContext($9d939cbc98267846$var$defaultContext);\nfunction $9d939cbc98267846$export$9f8ac96af4b1b2ae(props) {\n    let cur = $cgWTI$useContext($9d939cbc98267846$var$SSRContext);\n    let value = $cgWTI$useMemo(()=>({\n            // If this is the first SSRProvider, start with an empty string prefix, otherwise\n            // append and increment the counter.\n            prefix: cur === $9d939cbc98267846$var$defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n            current: 0\n        })\n    , [\n        cur\n    ]);\n    return(/*#__PURE__*/ $cgWTI$react.createElement($9d939cbc98267846$var$SSRContext.Provider, {\n        value: value\n    }, props.children));\n}\nlet $9d939cbc98267846$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\nfunction $9d939cbc98267846$export$619500959fc48b26(defaultId) {\n    let ctx = $cgWTI$useContext($9d939cbc98267846$var$SSRContext);\n    // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n    // provide a warning to hint to the developer to add one.\n    if (ctx === $9d939cbc98267846$var$defaultContext && !$9d939cbc98267846$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n    return $cgWTI$useMemo(()=>defaultId || `react-aria${ctx.prefix}-${++ctx.current}`\n    , [\n        defaultId\n    ]);\n}\nfunction $9d939cbc98267846$export$535bd6ca7f90a273() {\n    let cur = $cgWTI$useContext($9d939cbc98267846$var$SSRContext);\n    let isInSSRContext = cur !== $9d939cbc98267846$var$defaultContext;\n    let [isSSR, setIsSSR] = $cgWTI$useState(isInSSRContext);\n    // If on the client, and the component was initially server rendered,\n    // then schedule a layout effect to update the component after hydration.\n    if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    $cgWTI$useLayoutEffect(()=>{\n        setIsSSR(false);\n    }, []);\n    return isSSR;\n}\n\n\n\n\nexport {$9d939cbc98267846$export$9f8ac96af4b1b2ae as SSRProvider, $9d939cbc98267846$export$619500959fc48b26 as useSSRSafeId, $9d939cbc98267846$export$535bd6ca7f90a273 as useIsSSR};\n"]},"metadata":{},"sourceType":"module"}